import 'package:flutter/material.dart';
import 'dart:math' as math; // Cho m√†u ng·∫´u nhi√™n (t√πy ch·ªçn)

class HomePage extends StatefulWidget {
  final Function(String productName, String imagePlaceholder) onNavigateToProductDetails;

  const HomePage({Key? key, required this.onNavigateToProductDetails}) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final Color _primaryColor = const Color(0xFF1F2C4C);
  int _selectedCategoryIndex = 0;
  final ScrollController _scrollController = ScrollController();
  bool _isAppBarCollapsed = false;

  final List<Map<String, String>> _categories = [
    {"name": "Fruits"},
    {"name": "Vegetables"},
    {"name": "Fast Food"},
    {"name": "Drinks"},
    {"name": "Bakery"},
  ];

  final List<Map<String, String>> _products = [
    {"name": "Apple", "cal": "55 Cal", "price": "\$10.45/kg", "image": "üçé"},
    {"name": "Orange", "cal": "75 Cal", "price": "\$14.75/kg", "image": "üçä"},
    {"name": "Melon", "cal": "156 Cal", "price": "\$25.11/kg", "image": "üçà"},
    {"name": "Dragon Fruit", "cal": "116 Cal", "price": "\$18.5/kg", "image": "üê≤"},
    {"name": "Banana", "cal": "105 Cal", "price": "\$8.5/kg", "image": "üçå"},
    {"name": "Grapes", "cal": "69 Cal", "price": "\$12.0/kg", "image": "üçá"},
  ];

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(() {
      // Gi·∫£ s·ª≠ chi·ªÅu cao m·ªü r·ªông c·ªßa SliverAppBar kho·∫£ng 150 v√† chi·ªÅu cao thu g·ªçn (toolbar) kho·∫£ng 56 (kToolbarHeight)
      // Ch√∫ng ta mu·ªën bi·∫øt khi n√†o ph·∫ßn flexibleSpace ƒë√£ cu·ªôn g·∫ßn h·∫øt
      // Offset khi SliverAppBar ch·ªâ c√≤n l·∫°i ph·∫ßn title/actions (ƒë√£ pinned)
      // ƒê·ªô cao c·ªßa ph·∫ßn ti√™u ƒë·ªÅ l·ªõn "Daily Grocery Food" + kho·∫£ng tr·ªëng
      const double expandedHeaderHeight = 120.0; // ∆Ø·ªõc l∆∞·ª£ng chi·ªÅu cao c·ªßa ph·∫ßn header l·ªõn
      if (_scrollController.hasClients &&
          _scrollController.offset > (expandedHeaderHeight - kToolbarHeight)) {
        if (!_isAppBarCollapsed) {
          setState(() {
            _isAppBarCollapsed = true;
          });
        }
      } else {
        if (_isAppBarCollapsed) {
          setState(() {
            _isAppBarCollapsed = false;
          });
        }
      }
    });
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  Widget _buildCategoryChip(String label, int index) {
    // ... (code kh√¥ng ƒë·ªïi)
    bool isSelected = _selectedCategoryIndex == index;
    return GestureDetector(
      onTap: () {
        setState(() {
          _selectedCategoryIndex = index;
        });
      },
      child: Container(
        margin: EdgeInsets.only(right: 10),
        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        decoration: BoxDecoration(
          color: isSelected ? _primaryColor : Colors.white,
          borderRadius: BorderRadius.circular(25),
          border: isSelected ? null : Border.all(color: Colors.grey[300]!),
          boxShadow: !isSelected
              ? [
            BoxShadow(
                color: Colors.grey.withOpacity(0.1),
                spreadRadius: 1,
                blurRadius: 3,
                offset: Offset(0, 1))
          ]
              : [],
        ),
        child: Text(
          label,
          style: TextStyle(
            color: isSelected ? Colors.white : Colors.black54,
            fontWeight: FontWeight.w500,
            fontSize: 14,
          ),
        ),
      ),
    );
  }

  Widget _buildProductCard(BuildContext context, String name, String cal, String price, String imageEmoji) {
    // ... (code kh√¥ng ƒë·ªïi)
    return GestureDetector(
      onTap: () {
        widget.onNavigateToProductDetails(name, imageEmoji);
      },
      child: Card(
        elevation: 2,
        shadowColor: Colors.grey.withOpacity(0.2),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Expanded(
                child: Center(
                  child: Container(
                    padding: EdgeInsets.all(10),
                    child: Text(imageEmoji, style: TextStyle(fontSize: 50)),
                  ),
                ),
              ),
              SizedBox(height: 10),
              Text(name,
                  style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87)),
              SizedBox(height: 4),
              Text(cal, style: TextStyle(fontSize: 12, color: Colors.grey[600])),
              SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(price,
                      style: TextStyle(
                          fontSize: 15,
                          color: Theme.of(context).hintColor,
                          fontWeight: FontWeight.bold)),
                  Container(
                    padding: EdgeInsets.all(5),
                    decoration: BoxDecoration(
                      color: Theme.of(context).hintColor,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(Icons.add, color: Colors.white, size: 20),
                  ),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Chi·ªÅu cao c·ªßa BottomNavBar, b·∫°n c·∫ßn l·∫•y gi√° tr·ªã n√†y t·ª´ MainNavigationScreen
    // ho·∫∑c ƒë·ªãnh nghƒ©a m·ªôt h·∫±ng s·ªë chung. T·∫°m th·ªùi d√πng gi√° tr·ªã c·ªë ƒë·ªãnh.
    const double bottomNavBarHeight = kBottomNavigationBarHeight + 20.0; // V√≠ d·ª•
    const double bodyBorderRadius = 30.0;

    return CustomScrollView(
      controller: _scrollController,
      physics: BouncingScrollPhysics(),
      slivers: <Widget>[
        SliverAppBar(
          backgroundColor: Theme.of(context).scaffoldBackgroundColor, // M√†u n·ªÅn c·ªßa AppBar khi thu g·ªçn
          expandedHeight: 160.0, // Chi·ªÅu cao khi m·ªü r·ªông (ch·ª©a "Daily Grocery Food")
          pinned: true, // Ghim AppBar l·∫°i khi cu·ªôn
          elevation: _isAppBarCollapsed ? 2.0 : 0.0, // Th√™m shadow khi thu g·ªçn
          automaticallyImplyLeading: false, // T·∫Øt n√∫t back m·∫∑c ƒë·ªãnh
          flexibleSpace: FlexibleSpaceBar(
            // titlePadding: EdgeInsets.zero, // B·ªè padding m·∫∑c ƒë·ªãnh c·ªßa title
            background: Padding( // Ph·∫ßn header l·ªõn
              padding: const EdgeInsets.only(left: 16.0, right: 16.0, top: 40.0, bottom: 10.0), // ƒêi·ªÅu ch·ªânh padding
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.end, // CƒÉn cu·ªëi ƒë·ªÉ g·∫ßn v·ªõi ph·∫ßn content
                children: [
                  Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "Daily",
                        style: TextStyle(fontSize: 22, fontWeight: FontWeight.w300, color: Colors.black54),
                      ),
                      Text(
                        "Grocery Food",
                        style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold, color: Colors.black87, height: 1.2),
                      ),
                    ],
                  ),
                  // Icon t√¨m ki·∫øm s·∫Ω hi·ªÉn th·ªã trong actions khi thu g·ªçn
                ],
              ),
            ),
            // Ph·∫ßn title n√†y s·∫Ω ch·ªâ hi·ªÉn th·ªã khi AppBar thu g·ªçn ƒë√°ng k·ªÉ (n·∫øu c√≥)
            // B·∫°n c√≥ th·ªÉ ƒë·ªÉ tr·ªëng ho·∫∑c hi·ªÉn th·ªã m·ªôt ti√™u ƒë·ªÅ nh·ªè h∆°n
            title: _isAppBarCollapsed
                ? Text(
              "Grocery Food",
              style: TextStyle(fontSize: 18, color: Colors.black87, fontWeight: FontWeight.bold),
            )
                : null, // ƒê·ªÉ tr·ªëng khi ch∆∞a thu g·ªçn h·∫≥n
            centerTitle: true, // CƒÉn gi·ªØa title thu g·ªçn
          ),
          actions: <Widget>[ // Actions s·∫Ω lu√¥n hi·ªÉn th·ªã
            IconButton(
              icon: Icon(Icons.search, size: 28, color: Colors.black54),
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Search Tapped")));
              },
            ),
            SizedBox(width: 8),
          ],
        ),

        // Ph·∫ßn Categories
        SliverToBoxAdapter(
          child: Padding(
            padding: const EdgeInsets.only(top: 20.0, left: 16.0, right: 16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text("Categories", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black87)),
                SizedBox(height: 12),
                SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  physics: BouncingScrollPhysics(),
                  child: Row(
                    children: _categories.asMap().entries.map((entry) {
                      int idx = entry.key;
                      Map<String, String> category = entry.value;
                      return _buildCategoryChip(category['name']!, idx);
                    }).toList(),
                  ),
                ),
                SizedBox(height: 30),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "Popular ${_categories[_selectedCategoryIndex]['name']}",
                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.black87),
                    ),
                    TextButton(
                      onPressed: () {},
                      child: Text("See all", style: TextStyle(color: Theme.of(context).hintColor, fontWeight: FontWeight.w500)),
                    ),
                  ],
                ),
                SizedBox(height: 15),
              ],
            ),
          ),
        ),

        // L∆∞·ªõi s·∫£n ph·∫©m
        SliverPadding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          sliver: SliverGrid(
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              mainAxisSpacing: 15,
              crossAxisSpacing: 15,
              childAspectRatio: 0.72,
            ),
            delegate: SliverChildBuilderDelegate(
                  (BuildContext context, int index) {
                final product = _products[index];
                return _buildProductCard(
                  context,
                  product['name']!,
                  product['cal']!,
                  product['price']!,
                  product['image']!,
                );
              },
              childCount: _products.length,
            ),
          ),
        ),

        // Padding ·ªü d∆∞·ªõi c√πng ƒë·ªÉ kh√¥ng b·ªã che b·ªüi BottomNavigationBar
        // (c·∫ßn t√≠nh to√°n ch√≠nh x√°c d·ª±a tr√™n chi·ªÅu cao NavBar v√† bo g√≥c c·ªßa body)
        SliverToBoxAdapter(
          child: SizedBox(height: bottomNavBarHeight + bodyBorderRadius + MediaQuery.of(context).padding.bottom + 20),
        ),
      ],
    );
  }
}